#####################################################
#                                                   #
#   OBSESS evaluation and optimization framework    #
#                                                   #
#####################################################
#
# R. Dekimpe (UCLouvain)
# Last update: 06.2020
#

import os
import sys
import getopt
import matplotlib.pyplot as plt
import numpy as np

import framework
import time

from src import evaluation


if __name__ == "__main__":
  params = framework.default_parameters()
  noise = [1e-6, 2.1e-6, 4.4e-6, 10e-6, 21e-6, 44e-6, 100e-6]
  sen = []
  ppv = []
  cm = []
  j = []
  #for i in range(0,len(noise)):
  #  params['IA_thermal_noise'] = noise[i]
  #  sen_i,ppv_i,cm_i,j_i = framework.run_framework_all_records(params = params,save_features=False,run_set="test")
  #  sen = sen + [sen_i]
  #  ppv = ppv + [ppv_i]
  #  cm = cm + [cm_i]
  #  j = j + [j_i]
  #print(sen)
  #print(ppv)
  #print(cm)
  #print(j)
  
  sen = [[100.0, 100.0, 99.6876220226474, 99.9526963103122, 100.0, 100.0, 99.94603345925526, 100.0, 99.9227202472952, 99.81203007518798, 100.0, 100.0, 100.0, 99.91115059973345, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 99.96736292428199, 100.0], [100.0, 100.0, 99.60952752830926, 99.9526963103122, 100.0, 100.0, 100.0, 100.0, 99.96136012364761, 99.81203007518798, 99.96206373292868, 100.0, 100.0, 99.95557529986672, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 99.96736292428199, 100.0], [100.0, 100.0, 99.64857477547832, 99.9526963103122, 100.0, 100.0, 99.94603345925526, 100.0, 99.9227202472952, 99.81203007518798, 99.88619119878604, 100.0, 100.0, 100.0, 100.0, 100.0, 99.95953055443141, 100.0, 100.0, 100.0, 99.96736292428199, 100.0], [100.0, 100.0, 99.53161592505855, 99.76348155156103, 100.0, 100.0, 99.67620075553157, 100.0, 99.9227202472952, 99.81203007518798, 99.73444613050076, 100.0, 100.0, 99.91115059973345, 100.0, 99.91721854304636, 99.55483609874544, 100.0, 100.0, 100.0, 99.96736292428199, 100.0], [100.0, 100.0, 99.25868123293016, 96.36105860113422, 100.0, 99.73787680209699, 96.0604425256341, 99.93381866313699, 99.69088098918084, 99.29511278195488, 98.02731411229135, 99.96343692870201, 100.0, 99.91115059973345, 100.0, 99.2135761589404, 95.12882447665056, 97.30919765166341, 100.0, 99.26719278466742, 99.90208877284596, 100.0], [95.80943978826643, 99.61427193828351, 94.2255169722981, 88.21626617375232, 99.83202687569988, 92.49347258485639, 88.24775013234516, 99.66909331568498, 95.17374517374517, 95.96433599249178, 90.89535323007178, 97.98976608187135, 99.78361669242659, 96.80284191829485, 99.25373134328358, 95.00206526228831, 85.84139264990328, 87.42138364779875, 97.95265515035189, 90.2263942573164, 97.68276762402088, 98.24881430134987], [83.99159663865547, 90.20446980504042, 83.64732479276563, 81.39637649138312, 92.0704845814978, 84.53865336658355, 82.36483072258717, 91.13428943937419, 83.55957767722474, 83.62226277372262, 84.1389187253849, 87.00842696629213, 94.97843499691929, 89.03812824956673, 91.25, 85.49860945570123, 80.58179070646014, 82.00371057513915, 88.72976338729764, 82.07847295864264, 88.56589147286822, 86.36847710330139]]
  ppv = [[100.0, 100.0, 98.0038387715931, 100.0, 100.0, 100.0, 100.0, 99.93386243386243, 99.88412514484357, 100.0, 99.77289931869795, 100.0, 100.0, 100.0, 100.0, 100.0, 99.19710959454035, 99.1747572815534, 100.0, 99.4949494949495, 100.0, 100.0], [100.0, 100.0, 98.07766243752403, 100.0, 100.0, 100.0, 100.0, 99.93386243386243, 99.88416988416988, 100.0, 99.81060606060606, 100.0, 100.0, 100.0, 100.0, 100.0, 99.15730337078652, 99.12663755458516, 100.0, 99.43914750420639, 100.0, 100.0], [100.0, 100.0, 98.22940723633565, 99.90543735224587, 100.0, 100.0, 99.94603345925526, 99.93386243386243, 99.9227202472952, 100.0, 99.69708443771299, 100.0, 100.0, 100.0, 100.0, 100.0, 98.52413242919825, 99.36770428015564, 100.0, 98.99497487437186, 100.0, 100.0], [100.0, 100.0, 98.22804314329738, 99.48113207547169, 100.0, 100.0, 99.83783783783784, 100.0, 99.69159599074789, 100.0, 99.73444613050076, 100.0, 100.0, 100.0, 100.0, 99.71086327963651, 91.17865085248332, 98.41040462427746, 100.0, 83.82978723404256, 100.0, 100.0], [99.51584507042253, 100.0, 98.33784306146116, 80.65664556962025, 99.83230855226384, 76.17617617617617, 81.80147058823529, 100.0, 97.17514124293785, 97.96012980992118, 97.17939074840166, 99.6718920889537, 100.0, 98.03836094158675, 99.5355318160706, 94.89311163895486, 69.9733491264436, 85.95505617977528, 78.02197802197803, 63.413755851638456, 99.8694942903752, 99.963530269876], [75.6794425087108, 95.64814814814815, 85.75994318181819, 53.896103896103895, 84.54243717401611, 41.725559481743225, 46.931306306306304, 81.05489773950484, 84.59162663006177, 62.27161997563947, 77.31362467866325, 93.61033519553072, 99.87623762376238, 88.25910931174089, 90.20771513353115, 79.86111111111111, 56.91202872531418, 55.27684307127562, 61.4119534697152, 45.860230143137805, 97.11226476314081, 95.59815406460774], [51.80098471106504, 52.25895316804408, 60.622610595303115, 47.893915756630264, 44.42082890541977, 35.65606100447015, 42.32666839781875, 41.05726872246696, 62.651964942041275, 51.31578947368421, 60.44238683127572, 63.71817948058627, 92.91742013261, 53.390491036632895, 57.800586510263926, 57.06709095730575, 55.4025974025974, 46.07766484232473, 39.98316498316498, 40.449438202247194, 79.96500437445319, 68.4003373629463]]
  cm = [np.array([[    0,     4,    19,    85,     0,     0],
         [    0, 40057,  3184,   789,     0,     0],
         [    0,   164,  1622,    41,     0,     0],
         [    0,    13,    87,  3102,     0,     0],
         [    0,    95,     5,   287,     0,     0],
         [    0,     1,     1,     5,     0,     0]]), np.array([[    0,     8,    18,    82,     0,     0],
         [    0, 39974,  3208,   847,     0,     0],
         [    0,   167,  1615,    45,     0,     0],
         [    0,    16,    87,  3100,     0,     0],
         [    0,    96,     6,   285,     0,     0],
         [    0,     1,     1,     5,     0,     0]]), np.array([[    0,    15,    37,    76,     0,     0],
         [    0, 39708,  3236,  1086,     0,     0],
         [    0,   171,  1601,    54,     0,     0],
         [    0,    11,    77,  3113,     0,     0],
         [    0,    92,     5,   290,     0,     0],
         [    0,     2,     0,     5,     0,     0]]), np.array([[    0,   245,   211,   239,     0,     0],
         [    0, 35830,  3272,  4906,     0,     0],
         [    0,   784,   801,   241,     0,     0],
         [    0,     7,    81,  3108,     0,     0],
         [    0,    71,    10,   305,     0,     0],
         [    0,     2,     0,     4,     0,     0]]), np.array([[    0,   617,   884,  3104,     0,     0],
         [    0, 16384,  3065, 24221,     0,     0],
         [    0,   535,   259,  1017,     0,     0],
         [    0,     9,    83,  3062,     0,     0],
         [    0,    47,    14,   325,     0,     0],
         [    0,     0,     1,     6,     0,     0]]), np.array([[    0,   311,   810, 16175,     0,     0],
         [    0,  1797,  1574, 38795,     0,     0],
         [    0,    38,    86,  1562,     0,     0],
         [    0,     9,    34,  2962,     0,     0],
         [    0,     4,     6,   372,     0,     0],
         [    0,     0,     1,     5,     0,     0]]), np.array([[    0,    16,   144, 36757,     0,     0],
         [    0,    25,   177, 39145,     0,     0],
         [    0,     1,     9,  1579,     0,     0],
         [    0,     0,    14,  2878,     0,     0],
         [    0,     0,     0,   366,     0,     0],
         [    0,     0,     0,     7,     0,     0]])]
  j = [74.16237125323713, 73.67053569135395, 72.49390576731714, 49.56403648475504, 32.34566418290243, 29.056427280634214, 28.003693775457425]
  
  SenS = np.zeros(len(noise))
  PPS = np.zeros(len(noise))
  SenV = np.zeros(len(noise))
  PPV = np.zeros(len(noise))
  for i in range(0,len(noise)):
    _,_,_,perf=evaluation.statClass(cm[i])
    print(perf)
    SenV[i] = perf[0]
    PPV[i]  = perf[1]
    SenS[i] = perf[2]
    PPS[i]  = perf[3]
    
  if True:
    fig, axs = plt.subplots(2)
    fig.suptitle("Noise sweep results")
    axs[0].loglog(noise,100-np.average(sen,axis=1),label='FNR')
    axs[0].loglog(noise,100-np.average(ppv,axis=1),label='FPR')
    axs[0].set_ylim([0.01,100])
    axs[0].legend()
    axs[0].set(ylabel="Detect. error rate [%]")
    axs[1].loglog(noise,100-SenS,label='S FNR')
    axs[1].loglog(noise,100-PPS,label='S FPR')
    axs[1].loglog(noise,100-SenV,label='V FNR')
    axs[1].loglog(noise,100-PPV,label='V FPR')
    axs[1].set(ylabel="Class. error rate [%]")
    axs[1].set_ylim([1,100])
    axs[1].legend()
    plt.savefig('plots/sweep_noise.png')
  
